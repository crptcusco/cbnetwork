# # OLD GENERATOR

    #
    # @staticmethod
    # def generate_directed_edges(i_last_variable, l_local_networks, l_relations, n_output_variables=2):
    #     """
    #     Generates directed edges based on local networks and their relations.
    #
    #     Args:
    #         i_last_variable (int): Index of the last variable.
    #         l_local_networks (list): List of LocalNetwork objects.
    #         l_relations (list): List of tuples representing relations between local networks.
    #         n_output_variables (int, optional): Number of output variables. Defaults to 2.
    #
    #     Returns:
    #         list: List of DirectedEdge objects.
    #     """
    #     l_directed_edges = []
    #     i_directed_edge = i_last_variable + 1
    #     index_edge = 1
    #
    #     for o_local_network in l_local_networks:
    #         l_local_networks_co = []
    #         for t_relation in l_relations:
    #             if t_relation[1] == o_local_network.index:
    #                 o_local_network_aux = next(filter(lambda x: x.index == t_relation[0], l_local_networks), None)
    #                 l_local_networks_co.append(o_local_network_aux)
    #
    #         for o_local_network_co in l_local_networks_co:
    #             l_output_variables = random.sample(o_local_network_co.l_var_intern, n_output_variables)
    #             if n_output_variables == 1:
    #                 coupling_function = l_output_variables[0]
    #             else:
    #                 coupling_function = " " + " âˆ¨ ".join(list(map(str, l_output_variables))) + " "
    #
    #             o_directed_edge = DirectedEdge(index_edge, i_directed_edge, o_local_network.index,
    #                                            o_local_network_co.index, l_output_variables, coupling_function)
    #             l_directed_edges.append(o_directed_edge)
    #             i_directed_edge += 1
    #             index_edge += 1
    #
    #     return l_directed_edges
    #

    #

    #
    # @staticmethod
    # def generate_local_networks_variables_dynamic(l_local_networks, l_directed_edges):
    #     """
    #     Generates the dynamics for each local network by creating internal variables and their clauses.
    #
    #     Args:
    #         l_local_networks (list): List of LocalNetwork objects.
    #         l_directed_edges (list): List of DirectedEdge objects.
    #
    #     Returns:
    #         list: List of updated LocalNetwork objects with dynamic variables.
    #     """
    #
    #     # the max number of clauses and literals is fixed in 2 and 3 respectively
    #     NUMBER_MAX_OF_CLAUSES = 2
    #     NUMBER_MAX_OF_LITERALS = 3
    #
    #     l_local_networks_updated = []
    #     for o_local_network in l_local_networks:
    #         l_aux_variables = []
    #         l_input_signals = CBN.find_input_edges_by_network_index(o_local_network.index, l_directed_edges)
    #         for o_signal in l_input_signals:
    #             l_aux_variables.append(o_signal.index_variable)
    #         l_aux_variables.extend(o_local_network.l_var_intern)
    #
    #         des_funct_variables = []
    #         for i_local_variable in o_local_network.l_var_intern:
    #             l_clauses_node = []
    #             for _ in range(randint(1, NUMBER_MAX_OF_CLAUSES)):
    #                 v_num_variable = randint(1, NUMBER_MAX_OF_LITERALS)
    #                 l_literals_variables = random.sample(l_aux_variables, v_num_variable)
    #                 l_clauses_node.append(l_literals_variables)
    #
    #             o_internal_variable = InternalVariable(i_local_variable, l_clauses_node)
    #             des_funct_variables.append(o_internal_variable)
    #
    #         o_local_network.des_funct_variables = des_funct_variables.copy()
    #         l_local_networks_updated.append(o_local_network)
    #         CustomText.make_sub_title(f"Local network created : {o_local_network.index}")
    #
    #     return l_local_networks_updated
    #
    # @staticmethod
    # def generate_aleatory_cbn_by_topology(n_local_networks, n_var_network, v_topology, l_edges=None,
    #                                       n_output_variables=2, n_input_variables=2, n_edges=None):
    #     """
    #     Generates an instance of a CBN.
    #
    #     Args:
    #         n_local_networks (int): Number of local networks to generate.
    #         n_var_network (int): Number of variables per network.
    #         v_topology (int): Type of topology for the CBN.
    #         l_edges (list): List of global edges.
    #         n_output_variables (int): Number of output variables.
    #         n_input_variables (int): Number of input variables.
    #         n_edges (int): Number of edges in the CBN.
    #         local_template (AleatoryTemplate): Template for local networks.
    #
    #     Returns:
    #         CBN: The generated CBN object.
    #     """
    #
    #     CustomText.make_title('CBN GENERATION')
    #
    #     # generate the CBN topology
    #     o_global_topology = GlobalTopology.generate_sample_topology(v_topology=v_topology, n_nodes=n_local_networks)
    #
    #     # generate the local network dynamic
    #
    #     # generate the local networks with the indexes and variables (without relations or dynamics)
    #     l_local_networks = CBN.generate_local_networks_indexes_variables(n_local_networks, n_var_network)
    #
    #     l_relations = o_global_topology.get_edges()
    #
    #     # search the last variable from the local network variables
    #     i_last_variable = l_local_networks[-1].l_var_intern[-1]
    #
    #     # generate the directed edges given the last variable generated
    #     l_directed_edges = CBN.generate_directed_edges(i_last_variable=i_last_variable,
    #                                                    l_local_networks=l_local_networks,
    #                                                    l_relations=l_relations,
    #                                                    n_output_variables=n_output_variables)
    #
    #     # Process the coupling signals for every local network
    #     for o_local_network in l_local_networks:
    #         # find the signals for every local network
    #         l_input_signals = CBN.find_input_edges_by_network_index(o_local_network.index, l_directed_edges)
    #         o_local_network.process_input_signals(l_input_signals)
    #
    #     l_local_networks = CBN.generate_local_networks_variables_dynamic(l_local_networks=l_local_networks,
    #                                                                      l_directed_edges=l_directed_edges)
    #
    #     # create the cbn object
    #     o_cbn = CBN(l_local_networks, l_directed_edges)
    #     # add the Global Topology Object
    #     o_cbn.o_global_topology = o_global_topology
    #     return o_cbn

# def find_local_attractors_heap(self):
    #     CustomText.print_duplex_line()
    #     print("FIND ATTRACTORS USING OPTIMIZED METHOD")
    #
    #     # create an empty heap to organize the local networks by weight
    #     o_custom_heap = CustomHeap()
    #
    #     # calculate the initial weights for every local network anda safe in the node of the heap
    #     for o_local_network in self.l_local_networks:
    #         weight = 0
    #         for o_directed_edge in self.l_directed_edges:
    #             if o_directed_edge.input_local_network == o_local_network.index:
    #                 # In the beginning all the kind or relations are "not computed" with index 2
    #                 weight = weight + o_directed_edge.kind_signal
    #         # create the node of the heap
    #         o_node = Node(o_local_network.index, weight)
    #         # add node to the heap with computed weight
    #         o_custom_heap.add_node(o_node)
    #
    #     # generate the initial heap
    #     initial_heap = o_custom_heap.get_indexes()
    #     # print(initial_heap)
    #
    #     # find the node in the top  of the heap
    #     lowest_weight_node = CustomHeap.remove_node(o_custom_heap)
    #     # find the local network information
    #     o_local_network = self.get_network_by_index(lowest_weight_node.index)
    #     # generate the local scenarios
    #     l_local_scenes = None
    #     if len(o_local_network.l_var_exterm) != 0:
    #         l_local_scenes = list(product(list('01'), repeat=len(o_local_network.l_var_exterm)))
    #
    #     # calculate the attractors for the node in the top of the  heap
    #     o_local_network = LocalNetwork.find_local_attractors(o_local_network, l_local_scenes)
    #     # update the network in the CBN
    #     self.update_network_by_index(o_local_network)
    #
    #     # validate if the output variables by attractor send a fixed value and update kind signals
    #     l_directed_edges = CBN.find_output_edges_by_network_index(o_local_network.index, self.l_directed_edges)
    #     # print("Local network:", l_var_intern.index)
    #     for o_output_signal in l_directed_edges:
    #         # print("Index variable output signal:", o_output_signal.index_variable_signal)
    #         # print("Output variables:", o_output_signal.l_output_variables)
    #         # print(str(o_output_signal.true_table))
    #         l_signals_for_output = []
    #         for o_local_scene in o_local_network.l_local_scenes:
    #             # print("Scene: ", str(o_local_scene.l_values))
    #             l_signals_in_local_scene = []
    #             for o_attractor in o_local_scene.l_attractors:
    #                 # print("ATTRACTOR")
    #                 l_signals_in_attractor = []
    #                 for o_state in o_attractor.l_states:
    #                     # print("STATE")
    #                     # print(l_var_intern.l_var_total)
    #                     # print(l_var_intern.l_var_intern)
    #                     # print(o_state.l_variable_values)
    #                     # # select the values of the output variables
    #                     true_table_index = ""
    #                     for v_output_variable in o_output_signal.l_output_variables:
    #                         # print("Variables list:", l_var_intern.l_var_total)
    #                         # print("Output variables list:", o_output_signal.l_output_variables)
    #                         # print("Output variable:", v_output_variable)
    #                         pos = o_local_network.l_var_total.index(v_output_variable)
    #                         value = o_state.l_variable_values[pos]
    #                         true_table_index = true_table_index + str(value)
    #                     # print(o_output_signal.l_output_variables)
    #                     # print(true_table_index)
    #                     output_value_state = o_output_signal.true_table[true_table_index]
    #                     # print("Output value :", output_value_state)
    #                     l_signals_in_attractor.append(output_value_state)
    #                 if len(set(l_signals_in_attractor)) == 1:
    #                     l_signals_in_local_scene.append(l_signals_in_attractor[0])
    #                     # print("the attractor signal value is stable")
    #
    #                     # add the attractor to the dictionary of output value -> attractors
    #                     if l_signals_in_attractor[0] == '0':
    #                         o_output_signal.d_out_value_to_attractor[0].append(o_attractor)
    #                     elif l_signals_in_attractor[0] == '1':
    #                         o_output_signal.d_out_value_to_attractor[1].append(o_attractor)
    #                 # else:
    #                 #     print("the attractor signal is not stable")
    #             if len(set(l_signals_in_local_scene)) == 1:
    #                 l_signals_for_output.append(l_signals_in_local_scene[0])
    #                 # print("the scene signal is restricted")
    #             else:
    #                 if len(set(l_signals_in_local_scene)) == 2:
    #                     l_signals_for_output.extend(l_signals_in_local_scene)
    #                     # print("the scene signal value is stable")
    #                 # else:
    #                 #     print("warning:", "the scene signal is not stable")
    #         if len(set(l_signals_for_output)) == 1:
    #             o_output_signal.kind_signal = 1
    #             print("the output signal is restricted")
    #         elif len(set(l_signals_for_output)) == 2:
    #             o_output_signal.kind_signal = 3
    #             print("the output signal is stable")
    #         else:
    #             o_output_signal.kind_signal = 4
    #             print("error:", "the scene signal is not stable. This CBN dont have stable Attractor Fields")
    #
    #     # # # print all the kinds of the signals
    #     # CustomText.print_simple_line()
    #     # print("Resume")
    #     # print("Network:", l_var_intern.index)
    #     # for o_directed_edge in self.l_directed_edges:
    #     #     print(o_directed_edge.index_variable, ":", o_directed_edge.kind_signal)
    #
    #     # Update the weights of the nodes
    #     # Add the output network to the list of modified networks
    #     l_modified_edges = CBN.find_input_edges_by_network_index(o_local_network.index, self.l_directed_edges)
    #     for o_edge in l_modified_edges:
    #         modified_network_index = o_edge.output_local_network
    #         # print("Network", modified_network_index)
    #         # print("Relation:", o_edge.input_local_network, "->", o_edge.output_local_network)
    #         weight = 0
    #         l_edges = CBN.find_input_edges_by_network_index(o_edge.output_local_network, self.l_directed_edges)
    #         for o_updated_edge in l_edges:
    #             weight = weight + o_updated_edge.kind_signal
    #         # print("New weight:", weight)
    #         o_custom_heap.update_node(o_edge.output_local_network, weight)
    #
    #     # # compare the initial heap with the update heap
    #     # print("INITIAL HEAP")
    #     # print(initial_heap)
    #     # print("UPDATE HEAP")
    #     # print(o_custom_heap.get_indexes())
    #
    #     # Verify if the heap has at least two elements
    #     while o_custom_heap.get_size() > 0:
    #         # find the node on the top of the heap
    #         lowest_weight_node = CustomHeap.remove_node(o_custom_heap)
    #         # Find Local Network
    #         o_local_network = self.get_network_by_index(lowest_weight_node.index)
    #
    #         l_local_scenes = None
    #         if len(o_local_network.l_var_exterm) != 0:
    #             l_local_scenes = list(product(list('01'), repeat=len(o_local_network.l_var_exterm)))
    #
    #         # Find attractors with the minimum weight
    #         LocalNetwork.find_local_attractors(o_local_network, l_local_scenes)
    #         # print("Local Network:", lowest_weight_node.index, "Weight:", lowest_weight_node.weight)
    #
    #         # COPIED CODE !!!
    #         # # Update kind signals
    #         # validate if the output variables by attractor send a fixed value
    #         l_directed_edges = CBN.find_output_edges_by_network_index(o_local_network.index,
    #                                                                   self.l_directed_edges)
    #         # print("Local network:", l_var_intern.index)
    #         for o_output_signal in l_directed_edges:
    #             # print("Index variable output signal:", o_output_signal.index_variable)
    #             # print("Output variables:", o_output_signal.l_output_variables)
    #             # print(str(o_output_signal.true_table))
    #             l_signals_for_output = []
    #             for o_local_scene in o_local_network.l_local_scenes:
    #                 # print("Scene: ", str(o_local_scene.l_values))
    #                 l_signals_in_local_scene = []
    #                 for o_attractor in o_local_scene.l_attractors:
    #                     # print("ATTRACTOR")
    #                     l_signals_in_attractor = []
    #                     for o_state in o_attractor.l_states:
    #                         # print("STATE")
    #                         # print(l_var_intern.l_var_total)
    #                         # print(l_var_intern.l_var_intern)
    #                         # print(o_state.l_variable_values)
    #                         # select the values of the output variables
    #                         true_table_index = ""
    #                         for v_output_variable in o_output_signal.l_output_variables:
    #                             # print("Variables list:", l_var_intern.l_var_total)
    #                             # print("Output variables list:", o_output_signal.l_output_variables)
    #                             # print("Output variable:", v_output_variable)
    #                             pos = o_local_network.l_var_total.index(v_output_variable)
    #                             value = o_state.l_variable_values[pos]
    #                             true_table_index = true_table_index + str(value)
    #                         # print(o_output_signal.l_output_variables)
    #                         # print(true_table_index)
    #                         output_value_state = o_output_signal.true_table[true_table_index]
    #                         # print("Output value :", output_value_state)
    #                         l_signals_in_attractor.append(output_value_state)
    #                     if len(set(l_signals_in_attractor)) == 1:
    #                         l_signals_in_local_scene.append(l_signals_in_attractor[0])
    #                         # print("the attractor signal value is stable")
    #
    #                         # add the attractor to the dictionary of output value -> attractors
    #                         if l_signals_in_attractor[0] == '0':
    #                             o_output_signal.d_out_value_to_attractor[0].append(o_attractor)
    #                         elif l_signals_in_attractor[0] == '1':
    #                             o_output_signal.d_out_value_to_attractor[1].append(o_attractor)
    #                     # else:
    #                     #     print("the attractor signal is not stable")
    #                 if len(set(l_signals_in_local_scene)) == 1:
    #                     l_signals_for_output.append(l_signals_in_local_scene[0])
    #                     # print("the scene signal is restricted")
    #                 else:
    #                     if len(set(l_signals_in_local_scene)) == 2:
    #                         l_signals_for_output.extend(l_signals_in_local_scene)
    #                         # print("the scene signal value is stable")
    #                     # else:
    #                     #     print("the scene signal is not stable")
    #             if len(set(l_signals_for_output)) == 1:
    #                 o_output_signal.kind_signal = 1
    #                 # print("the output signal is restricted")
    #             elif len(set(l_signals_for_output)) == 2:
    #                 o_output_signal.kind_signal = 3
    #                 # print("the output signal is stable")
    #             else:
    #                 o_output_signal.kind_signal = 4
    #                 print("THE SCENE SIGNAL IS NOT STABLE. THIS CBN DONT HAVE STABLE ATTRACTOR FIELDS")
    #
    #         # # print all the kinds of the signals
    #         # CustomText.print_duplex_line()
    #         # print("RESUME")
    #         # print("Network:", l_var_intern.index)
    #         # for o_directed_edge in self.l_directed_edges:
    #         #     print(o_directed_edge.index_variable_signal, ":", o_directed_edge.kind_signal)
    #
    #         # Update the weights of the nodes
    #         # Add the output network to the list of modified networks
    #         l_modified_edges = CBN.find_input_edges_by_network_index(o_local_network.index,
    #                                                                  self.l_directed_edges)
    #         for o_edge in l_modified_edges:
    #             modified_network_index = o_edge.output_local_network
    #             # print("Network", modified_network_index)
    #             # print("Relation:", o_edge.input_local_network, "->", o_edge.output_local_network)
    #             weight = 0
    #             l_edges = CBN.find_input_edges_by_network_index(o_edge.output_local_network,
    #                                                             self.l_directed_edges)
    #             for o_updated_edge in l_edges:
    #                 weight = weight + o_updated_edge.kind_signal
    #             # print("New weight:", weight)
    #             o_custom_heap.update_node(o_edge.output_local_network, weight)
    #
    #         # print("INITIAL HEAP")
    #         # print(initial_heap)
    #         # print("UPDATE HEAP")
    #         # print(o_custom_heap.get_indexes())
    #         # print("empty heap")
    #         # print("The Local attractors are computed")
    #     print("ALL THE ATTRACTORS ARE COMPUTED")


#
    #     print("All the attractors are computed")
    #     print("===============================")

    #     # # Evaluate the signals that don't have input coupling signals
    #     # l_local_network_without_signals = []
    #     # for o_local_network in self.l_local_networks:
    #     #     if not o_local_network.l_input_signals:
    #     #         l_local_network_without_signals.append(o_local_network.index)
    #     # print(l_local_network_without_signals)
    #
    #     # print(heap)
    #
    # def evaluate_cbn_topology(self):
    #     # Find attractors
    #     # create a directed graph
    #     o_graph = nx.DiGraph()
    #
    #     # add edges to the graph
    #     for o_local_network in self.l_local_networks:
    #         for o_input_signal in o_local_network.l_input_signals:
    #             print("Add edge:", o_input_signal.output_local_network, "-", o_input_signal.input_local_network, ':', 0)
    #             o_graph.add_edge(o_input_signal.output_local_network, o_input_signal.input_local_network, weight=0)
    #
    #     # graph have cycles or not
    #     is_acyclic = nx.is_directed_acyclic_graph(o_graph)
    #     if is_acyclic:
    #         # make topological order
    #         topological_order = list(nx.topological_sort(o_graph))
    #         print("The graph is no cycled - Topological order:", topological_order)
    #     else:
    #         print("The graph is cycled - you have to use other strategy ... using heaps")
    #
    #
    #

    # # utils function
    # @staticmethod
    # def send_text(a_kind, a_text, a_type):
    #     if a_type == 1:
    #         print(a_text)
    #     if a_type == 2 and a_kind == 'ERROR':
    #         print(a_text)
    #     if a_type == 3 and a_kind == 'INFO':
    #         print(a_text)
    #     if a_type == 4 and a_kind == 'MESSAGE':
    #         print(a_text)


            # # see the lind of every coupling signals
        # l_index_output_signals = []
        # for o_directed_edge in self.l_directed_edges:
        #     print(o_directed_edge.input_local_network, "->", o_directed_edge.output_local_network,
        #           "Kind signal:", o_directed_edge.kind_signal)
        #     print("Index:", o_directed_edge.index_variable_signal, "->", o_directed_edge.kind_signal)
        #     l_index_output_signals.append(o_directed_edge.index_variable_signal)

        # for t_edge in l_edges:
    #     coupling_function = " " + " âˆ¨ ".join(list(map(str, l_output_variables))) + " "
    #     o_directed_edge = DirectedEdge(o_local_network.index,
    #                                    o_local_network_co.index,
    #                                    l_output_variables,
    #                                    v_cont_var,
    #                                    coupling_function)
    #     # generate the object of the directed edge
    #     o_directed_edge = DirectedEdge(t_edge[0], t_edge[1], )


# def generate_aleatory_template(self, n_var_network=5, n_input_variables=2, n_max_of_clauses=2, n_max_of_literals=3):
    #
    # def generate_path_template(self, n_var_network, n_input_variables=2, n_output_variables=2):
    #     """
    #     Generates aleatory template for a local network
    #     :param n_output_variables:
    #     :param n_input_variables:
    #     :param n_var_network:
    #     :return: Dictionary of cnf function for variable and list of exit variables
    #     """
    #
    #     # 1_manual properties
    #     l_internal_var_indexes = list(range(n_var_network + 1, (n_var_network * 2) + 1))
    #     l_output_var_indexes = random.sample(range(1, n_var_network + 1), n_output_variables)
    #     l_input_coupling_signal_indexes = [n_var_network * 2 + 1]
    #
    #     # calculate properties
    #     l_var_total_indexes = l_internal_var_indexes + l_input_coupling_signal_indexes
    #
    #     # generate the aleatory dynamic
    #     d_variable_cnf_function = {}
    #
    #     # select the internal variables that are going to have external variables
    #     internal_vars_for_external = random.sample(l_internal_var_indexes, n_input_variables)
    #
    #     # generate cnf function for every internal variable
    #     for i_variable in l_internal_var_indexes:
    #         # evaluate if the variable is in internal_vars_for_external
    #         if i_variable in internal_vars_for_external:
    #             external_flag = False
    #             while not external_flag:
    #                 d_variable_cnf_function[i_variable] = [random.sample(l_var_total_indexes, 3)]
    #                 if any(element in d_variable_cnf_function[i_variable][0] for element in
    #                        l_input_coupling_signal_indexes):
    #                     external_flag = True
    #         else:
    #             # generate cnf function without external variables
    #             d_variable_cnf_function[i_variable] = [random.sample(l_internal_var_indexes, 3)]
    #
    #         # apply negation randomly
    #         d_variable_cnf_function[i_variable][0] = [
    #             -element if random.choice([True, False]) else element for element
    #             in d_variable_cnf_function[i_variable][0]]
    #
    #     # Generate the object of PathCircleTemplate
    #     o_path_circle_template = PathCircleTemplate(n_var_network, d_variable_cnf_function, l_output_var_indexes)
    #     return o_path_circle_template
    #
    # def generate_circle_template(self, n_var_network, n_input_variables=2, n_output_variables=2):
    #     """
    #     Generates aleatory template for a local network
    #     :param n_output_variables:
    #     :param n_input_variables:
    #     :param n_var_network:
    #     :return: Dictionary of cnf function for variable and list of exit variables
    #     """
    #
    #     # 1_manual properties
    #     l_internal_var_indexes = list(range(n_var_network + 1, (n_var_network * 2) + 1))
    #     l_output_var_indexes = random.sample(range(1, n_var_network + 1), n_output_variables)
    #     l_input_coupling_signal_indexes = [n_var_network * 2 + 1]
    #
    #     # calculate properties
    #     l_var_total_indexes = l_internal_var_indexes + l_input_coupling_signal_indexes
    #
    #     # generate the aleatory dynamic
    #     d_variable_cnf_function = {}
    #
    #     # select the internal variables that are going to have external variables
    #     internal_vars_for_external = random.sample(l_internal_var_indexes, n_input_variables)
    #
    #     # generate cnf function for every internal variable
    #     for i_variable in l_internal_var_indexes:
    #         # evaluate if the variable is in internal_vars_for_external
    #         if i_variable in internal_vars_for_external:
    #             external_flag = False
    #             while not external_flag:
    #                 d_variable_cnf_function[i_variable] = [random.sample(l_var_total_indexes, 3)]
    #                 if any(element in d_variable_cnf_function[i_variable][0] for element in
    #                        l_input_coupling_signal_indexes):
    #                     external_flag = True
    #         else:
    #             # generate cnf function without external variables
    #             d_variable_cnf_function[i_variable] = [random.sample(l_internal_var_indexes, 3)]
    #
    #         # apply negation randomly
    #         d_variable_cnf_function[i_variable][0] = [
    #             -element if random.choice([True, False]) else element for element
    #             in d_variable_cnf_function[i_variable][0]]
    #
    #     # Generate the object of PathCircleTemplate
    #     o_path_circle_template = PathCircleTemplate(n_var_network, d_variable_cnf_function, l_output_var_indexes)
    #     return o_path_circle_template

    # @staticmethod
    # def generate_template(n_variables, n_input_variables, n_output_variables):
    #     # generate the list of variables
    #     l_variables = list(range(1, n_variables + 1))
    #     # generate the list of input variables
    #     l_input_variables = random.sample(l_variables, n_input_variables)
    #     # generate the list of output variables
    #     l_output_variables = random.sample(l_variables, n_output_variables)
    #
    #     o_local_network_template = LocalNetworkTemplate(l_variables, l_input_variables, l_output_variables)
    #     return o_local_network_template

    # def generate_local_dynamic_with_template(self, l_local_networks, l_directed_edges, v_topology):
    #     """
    #     GENERATE THE DYNAMICS OF EACH LOCAL NETWORK WITH LOCAL NETWORK TEMPLATE
    #     :param v_topology:
    #     :param l_local_networks:
    #     :param l_directed_edges:
    #     :return: l_local_networks updated
    #     """
    #     # generate an auxiliary list to modify the variables
    #     l_local_networks_updated = []
    #
    #     # update the dynamic for every local network
    #     for o_local_network in l_local_networks:
    #         CustomText.print_simple_line()
    #         print("Local Network:", o_local_network.index)
    #
    #         # find the directed edges by network index
    #         l_input_signals_by_network = CBN.find_input_edges_by_network_index(index=o_local_network.index,
    #                                                                            l_directed_edges=l_directed_edges)
    #
    #         # generate the function description of the variables
    #         des_funct_variables = []
    #         # generate clauses for every local network adapting the template
    #         for i_local_variable in o_local_network.l_var_intern:
    #             CustomText.print_simple_line()
    #             # adapting the clause template to the 5_specific variable
    #             l_clauses_node = self.update_clause_from_template(l_local_networks=l_local_networks,
    #                                                               o_local_network=o_local_network,
    #                                                               i_local_variable=i_local_variable,
    #                                                               l_directed_edges=l_input_signals_by_network)
    #             # generate an internal variable from satispy
    #             o_variable_model = InternalVariable(index=i_local_variable, cnf_function=l_clauses_node)
    #             # adding the description in functions of every variable
    #             des_funct_variables.append(o_variable_model)
    #
    #         # adding the local network to a list of local networks
    #         o_local_network.des_funct_variables = des_funct_variables.copy()
    #         l_local_networks_updated.append(o_local_network)
    #         print("Local network created :", o_local_network.index)
    #         CustomText.print_simple_line()
    #
    #     # actualized the list of local networks
    #     return l_local_networks_updated

    # def get_output_variables_from_template(self, i_local_network, l_local_networks):
    #     # select the internal variables
    #     l_variables = []
    #     for o_local_network in l_local_networks:
    #         if o_local_network.index == i_local_network:
    #             # select the 5_specific variables from variable list intern
    #             for position in self.l_output_var_indexes:
    #                 l_variables.append(o_local_network.l_var_intern[position - 1])
    #
    #     return l_variables
    #
    # def update_clause_from_template(self, l_local_networks, o_local_network, i_local_variable, l_directed_edges,
    #                                 v_topology):
    #     """
    #     update clause from template
    #     :param l_directed_edges:
    #     :param v_topology:
    #     :param l_local_networks:
    #     :param o_local_network:
    #     :param i_local_variable:
    #     :return: l_clauses_node
    #     """
    #
    #     l_indexes_directed_edges = []
    #     for o_directed_edge in l_directed_edges:
    #         l_indexes_directed_edges.append(o_directed_edge.index_variable)
    #
    #     # find the correct cnf function for the variables
    #     n_local_variables = len(l_local_networks[0].l_var_intern)
    #     i_template_variable = i_local_variable - ((o_local_network.index - 1) * n_local_variables) + n_local_variables
    #     pre_l_clauses_node = self.d_variable_cnf_function[i_template_variable]
    #
    #     print("Local Variable index:", i_local_variable)
    #     print("Template Variable index:", i_template_variable)
    #     print("Template Function:", pre_l_clauses_node)
    #
    #     # for every pre-clause update the variables of the cnf function
    #     l_clauses_node = []
    #     for pre_clause in pre_l_clauses_node:
    #         # update the number of the variable
    #         l_clause = []
    #         for template_value in pre_clause:
    #             # evaluate if the topology is linear(4) and is the first local network and not in the list of dictionary
    #             if (v_topology == 4 and o_local_network.index == 1
    #                     and abs(template_value) not in list(self.d_variable_cnf_function.keys())):
    #                 continue
    #             else:
    #                 # save the symbol (+ or -) of the value True for "+" and False for "-"
    #                 b_symbol = True
    #                 if template_value < 0:
    #                     b_symbol = False
    #                 # replace the value with the variable index
    #                 local_value = abs(template_value) + (
    #                         (o_local_network.index - 3) * n_local_variables) + n_local_variables
    #                 # analyzed if the value is an external value,searching the value in the list of intern variables
    #                 if local_value not in o_local_network.l_var_intern:
    #                     # print(o_local_network.l_var_intern)
    #                     # print(o_local_network.l_var_exterm)
    #                     # print(local_value)
    #                     local_value = o_local_network.l_var_exterm[0]
    #                 # add the symbol to the value
    #                 if not b_symbol:
    #                     local_value = -local_value
    #                 # add the value to the local clause
    #                 l_clause.append(local_value)
    #
    #         # add the clause to the list of clauses
    #         l_clauses_node.append(l_clause)
    #
    #     print("Local Variable Index:", i_local_variable)
    #     print("CNF Function:", l_clauses_node)
    #
    #     return l_clauses_node

